#!/usr/bin/env python3

import fileinput
import re
import sys

ignore = None
infiles = []
dump = []

i = 1
while i < len(sys.argv):
    if sys.argv[i] == "--ignore":
        ignore = re.compile(sys.argv[i + 1])
        i += 1
    elif sys.argv[i] == "--help" or sys.argv[i] == "-h":
        print("Options:")
        print("\t--ignore <regex>\t\tFunctions to omit from the resulting graph")
        sys.exit(0)
    else:
        infiles.append(sys.argv[i])
    i += 1

current = ""
calls = {}

func_old = re.compile("^;; Function (?P<func>\S+)\s*$")
func_new = re.compile("^;; Function (?P<mangle>.*)\s+\((?P<func>\S+)(,.*)?\).*$")
funcall = re.compile("^.*\(call.*\"(?P<target>.*)\".*$")
symref = re.compile("^.*\(symbol_ref.*\"(?P<target>.*)\".*$")

def enter(func):
    global current, calls
    current = func
    if calls.get(current, None) is None:
        calls[current] = {}

def call(func, facility):
    global calls
    if calls[current].get(func, None) is not None and calls[current][func] != facility:
        return
    calls[current][func] = facility

def flatten(func):
    global calls, dump
    if calls.get(func, None) is None:
        # edge node
        return
    for ref in calls[func].keys():
       style = "" if calls[func][ref] == "call" else ' [style="dashed"]'
       # Invalidate the reference to avoid loops
       calls[func][ref] = None
       if ignore is None or re.match(ignore, ref) is None:
           # avoid recursive loops with same function name and reference
           if calls[func][ref] != "call" and func == ref:
               return
           match = next((d for d in dump if d['func'] == func and d['ref'] == ref), None)
           if match is None:
               dump.append({'func': func, 'ref': ref, 'style': style, 'count': 0})
           else:
               match['count'] += 1
               if len(match['style']) > len(style):
                   match['style'] = style
           flatten(ref)

# Scan the rtl dump into the dict
for line in fileinput.input(infiles):
    if re.match(func_old, line) is not None:
        # print "OLD", re.match(func_old, line).group("func")
        enter(re.match(func_old, line).group("func"))
    elif re.match(func_new, line) is not None:
        # print "NEW", re.match(func_new, line).group("func"), "Mangled:", re.match(func_new, line).group("mangle")
        enter(re.match(func_new, line).group("func"))
    elif re.match(funcall, line) is not None:
        # print "CALL", re.match(funcall, line).group("target")
        call(re.match(funcall, line).group("target"), "call")
    elif re.match(symref, line) is not None:
        # print "REF", re.match(symref, line).group("target")
        call(re.match(symref, line).group("target"), "ref")

def root_name(func):
    match = next((_d for _d in dump if _d['ref'] == func), None)
    if match is None:
        return func
    else:
        return root_name(match['func'])

def smallest_children_style_length(func):
    smallest = None
    for _d in dump:
        if _d['func'] != func:
            continue
        i = len(_d['style'])
        if smallest == None:
            smallest = i
        smallest = min(smallest, i)
    return smallest

def can_msg_handler_used(d):
    if d['func'] != "can_msg_handler":
        return True
    for _d in dump:
        if _d['func'] == d['ref']:
            return True
    return False

def user_tick_interrupt_used(d):
    if d['func'] != "user_tick_interrupt":
        return True
    for _d in dump:
        if _d['func'] == d['ref']:
            return True
    return False

def check_root(func):
    return func == "main" or re.match("__vector_.+", func) is not None

print("digraph callgraph {")
for i in calls:
    flatten(i)
roots = []
for d in dump:
    root_func = root_name(d['func'])
    try:
        roots.index(root_func)
    except:
        roots.append(root_func)
    if (d['count'] > 0 or len(d['style']) == 0 or smallest_children_style_length(d['func']) == 0) and can_msg_handler_used(d) and user_tick_interrupt_used(d) and check_root(root_func):
        print('"' + d['func'] + '" -> "' + d['ref'] + '"' + d['style'] + ';')
root_transform = {
    '__vector_1': 'can_interrupt',
		'__vector_7': 'tick_interrupt',
}
for root in roots:
    if check_root(root) == False:
        continue
    try:		
        lbl = root_transform[root]
    except:
        lbl = root
    print('"' + root + '" [label=< <FONT POINT-SIZE="20">' + lbl + '</FONT> >];')
print("}")
